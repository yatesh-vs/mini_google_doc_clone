{"version":3,"sources":["slateInitialValue.ts","SyncingEditor.tsx","GroupEditor.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialValue","Value","fromJSON","document","nodes","object","type","text","socket","io","SyncingEditor","_ref","groupId","_useState","useState","_useState2","Object","slicedToArray","value","setValue","id","useRef","concat","Date","now","editor","remote","useEffect","fetch","then","x","json","data","eventName","on","_ref2","editorId","ops","current","forEach","op","applyOperation","off","react_default","a","createElement","Fragment","onMouseDown","e","preventDefault","toggleMark","slate_react_es","ref","style","backgroundColor","maxWidth","minHeight","renderMark","props","_editor","next","mark","letterSpacing","color","children","onChange","opts","operations","filter","o","has","toJS","map","objectSpread","source","length","emit","toJSON","GroupEditor","match","params","react","SyncingEditor_SyncingEditor","App","react_router_dom","react_router","path","exact","render","to","component","Boolean","window","location","hostname","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d44b188.chunk.js","sourcesContent":["import { Value } from \"slate\";\n\nexport const initialValue = Value.fromJSON({\n  document: {\n    nodes: [\n      {\n        object: \"block\",\n        type: \"paragraph\",\n        nodes: [\n          {\n            object: \"text\",\n            text: \"A line of text in a paragraph.\"\n          }\n        ]\n      }\n    ]\n  }\n} as any);\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { Editor } from \"slate-react\";\nimport { initialValue } from \"./slateInitialValue\";\nimport io from \"socket.io-client\";\nimport { Operation, Value } from \"slate\";\n\nconst socket = io(\"https://3887-116-72-209-180.in.ngrok.io\");\n\ninterface Props {\n  groupId: string;\n}\n\nexport const SyncingEditor: React.FC<Props> = ({ groupId }) => {\n  const [value, setValue] = useState(initialValue);\n  const id = useRef(`${Date.now()}`);\n  const editor = useRef<Editor | null>(null);\n  const remote = useRef(false);\n\n  useEffect(() => {\n    fetch(`https://3887-116-72-209-180.in.ngrok.io/groups/${groupId}`).then(x =>\n      x.json().then(data => {\n        setValue(Value.fromJSON(data));\n      })\n    );\n    const eventName = `new-remote-operations-${groupId}`;\n    socket.on(\n      eventName,\n      ({ editorId, ops }: { editorId: string; ops: Operation[] }) => {\n        if (id.current !== editorId) {\n          remote.current = true;\n          ops.forEach((op: any) => editor.current!.applyOperation(op));\n          remote.current = false;\n        }\n      }\n    );\n\n    return () => {\n      socket.off(eventName);\n    };\n  }, [groupId]);\n\n  return (\n    <>\n      <button\n        onMouseDown={e => {\n          e.preventDefault();\n          // bold selected text\n          editor.current!.toggleMark(\"bold\");\n        }}\n      >\n        bold\n      </button>\n      <button\n        onMouseDown={e => {\n          e.preventDefault();\n          // bold selected text\n          editor.current!.toggleMark(\"italic\");\n        }}\n      >\n        italic\n      </button>\n      <Editor\n        ref={editor}\n        style={{\n          backgroundColor: \"#fafafa\",\n          maxWidth: 800,\n          minHeight: 150\n        }}\n        value={value}\n        renderMark={(props, _editor, next) => {\n          if (props.mark.type === \"bold\") {\n            return (\n              <strong\n                style={{\n                  letterSpacing: 1,\n                  color: \"pink\"\n                }}\n              >\n                {props.children}\n              </strong>\n            );\n          } else if (props.mark.type === \"italic\") {\n            return <em>{props.children}</em>;\n          }\n\n          return next();\n        }}\n        onChange={opts => {\n          setValue(opts.value);\n\n          const ops = opts.operations\n            .filter(o => {\n              if (o) {\n                return (\n                  o.type !== \"set_selection\" &&\n                  o.type !== \"set_value\" &&\n                  (!o.data || !o.data.has(\"source\"))\n                );\n              }\n\n              return false;\n            })\n            .toJS()\n            .map((o: any) => ({ ...o, data: { source: \"one\" } }));\n\n          if (ops.length && !remote.current) {\n            socket.emit(\"new-operations\", {\n              editorId: id.current,\n              ops,\n              value: opts.value.toJSON(),\n              groupId\n            });\n          }\n        }}\n      />\n    </>\n  );\n};\n","import * as React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { SyncingEditor } from \"./SyncingEditor\";\n\nexport const GroupEditor: React.FC<RouteComponentProps<{ id: string }>> = ({\n  match: {\n    params: { id }\n  }\n}) => {\n  return (\n    <div>\n      <SyncingEditor groupId={id} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport { GroupEditor } from \"./GroupEditor\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Route\n        path=\"/\"\n        exact\n        render={() => {\n          return <Redirect to={`/group/${Date.now()}`} />;\n        }}\n      />\n      <Route path=\"/group/:id\" component={GroupEditor} />\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}