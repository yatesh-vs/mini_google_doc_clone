{"version":3,"sources":["slateInitialValue.ts","SyncingEditor.tsx","GroupEditor.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialValue","Value","fromJSON","document","nodes","object","type","text","SyncingEditor","_ref","groupId","_useState","useState","_useState2","Object","slicedToArray","value","setValue","editor","useRef","concat","Date","now","remote","useEffect","react_default","a","createElement","Fragment","onMouseDown","e","preventDefault","current","toggleMark","slate_react_es","ref","style","backgroundColor","maxWidth","minHeight","renderMark","props","_editor","next","mark","letterSpacing","color","children","onChange","opts","operations","filter","o","data","has","toJS","map","objectSpread","source","length","GroupEditor","id","match","params","react","SyncingEditor_SyncingEditor","Test","App","react_router_dom","react_router","path","exact","render","to","component","Boolean","window","location","hostname","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8KAKMA,OAAeC,EAAMC,SAAS,CAClCC,SAAU,CACRC,MAAO,CACL,CACEC,OAAQ,QACRC,KAAM,YACNF,MAAO,CACL,CACEC,OAAQ,OACRE,KAAM,wCCOLC,EAAiC,SAAAC,GAAiB,IAAdC,EAAcD,EAAdC,QAAcC,EACnCC,mBAASZ,GAD0Ba,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACtDK,EADsDH,EAAA,GAC/CI,EAD+CJ,EAAA,GAGvDK,GADKC,iBAAM,GAAAC,OAAIC,KAAKC,QACXH,iBAAsB,OAC/BI,EAASJ,kBAAO,GAmDtB,OA7BAK,oBAAU,aA2BP,CAACd,IAGFe,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,UACEE,YAAa,SAACC,GACZA,EAAEC,iBAEFb,EAAOc,QAASC,WAAW,UAJ/B,QASAR,EAAAC,EAAAC,cAAA,UACEE,YAAa,SAACC,GACZA,EAAEC,iBAEFb,EAAOc,QAASC,WAAW,YAJ/B,UAUAR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEC,IAAKjB,EACLkB,MAAO,CACLC,gBAAiB,UACjBC,SAAU,IACVC,UAAW,KAEbvB,MAAOA,EACPwB,WAAY,SAACC,EAAOC,EAASC,GAC3B,MAAwB,SAApBF,EAAMG,KAAKtC,KAEXmB,EAAAC,EAAAC,cAAA,UACES,MAAO,CACLS,cAAe,EACfC,MAAO,SAGRL,EAAMM,UAGkB,WAApBN,EAAMG,KAAKtC,KACbmB,EAAAC,EAAAC,cAAA,UAAKc,EAAMM,UAGbJ,KAETK,SAAU,SAACC,GACThC,EAASgC,EAAKjC,OAEFiC,EAAKC,WACdC,OAAO,SAACC,GACP,QAAIA,IAEW,kBAAXA,EAAE9C,MACS,cAAX8C,EAAE9C,QACA8C,EAAEC,OAASD,EAAEC,KAAKC,IAAI,cAM7BC,OACAC,IAAI,SAACJ,GAAD,OAAAtC,OAAA2C,EAAA,EAAA3C,CAAA,GAAkBsC,EAAlB,CAAqBC,KAAM,CAAEK,OAAQ,WAMpCC,QAAWpC,EAAOS,aC7IvB4B,EAA6D,SAAAnD,GAIpE,IAFQoD,EAERpD,EAHJqD,MACEC,OAAUF,GAGZ,OACEG,EAAA,yBACEA,EAAA,cAACC,EAAD,CAAevD,QAASmD,MCPxBK,EAAO,WACX,OAAOzC,EAAAC,EAAAC,cAAA,qBAwBMwC,EArBH,WACV,OACE1C,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAACyC,EAAA,EAAD,KACE3C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,KACE5C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CACEC,KAAK,IACLC,OAAK,EACLC,OAAQ,WACN,OAAO/C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAUI,GAAE,UAAArD,OAAYC,KAAKC,YAGxCG,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAOC,KAAK,aAAaI,UAAWd,IACpCnC,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAOC,KAAK,QAAQI,UAAWR,QCVrBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAShB,MACvB,2DCbNiB,IAASP,OAAO/C,EAAAC,EAAAC,cAACqD,EAAD,MAAS7E,SAAS8E,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.95449db6.chunk.js","sourcesContent":["/*\nimport value from slate for providing value of that type as initialValue\n*/\nimport { Value } from \"slate\";\n\nconst initialValue = Value.fromJSON({\n  document: {\n    nodes: [\n      {\n        object: \"block\",\n        type: \"paragraph\",\n        nodes: [\n          {\n            object: \"text\",\n            text: \"A line of text in a paragraph.\",\n          },\n        ],\n      },\n    ],\n  },\n} as any);\n\nexport { initialValue };\n","import React, { useState, useRef, useEffect } from \"react\";\n// Editor is used for making an instance of Editor type\nimport { Editor } from \"slate-react\";\n// initialValue type of object that Editor takes to initialise.\nimport { initialValue } from \"./slateInitialValue\";\n// make a connection with client who so ever opens it will get the current change\nimport io from \"socket.io-client\";\n// Value will convert the data to of type editor what he needs.\nimport { Operation, Value } from \"slate\";\n\n// import Mitt from \"mitt\";\n\n// creata a socket for others to connect with\n// const socket = io(\"http://localhost:4000\");\n\n// create a event mitter that listens changes and reflect it back to other person that open the same editor.\n// const emitter = new Mitt();\ninterface Props {\n  groupId: string;\n}\n\nexport const SyncingEditor: React.FC<Props> = ({ groupId }) => {\n  const [value, setValue] = useState(initialValue);\n  const id = useRef(`${Date.now()}`);\n  const editor = useRef<Editor | null>(null);\n  const remote = useRef(false);\n\n  // useEffect(() => {\n  //   emitter.on(\"*\", (type:string, ops:Operation[]) => {\n  //   if(id.current !== type){\n  //      console.log('change happened to another editor');\n  //   }\n  //     \n  //     const eventName = `new-remote-operations-${groupId}`;\n  //     emitter.emit(\n  //       eventName,\n  //       ({ editorId, ops }: { editorId: string; ops: Operation[] }) => {\n  //         if (id.current !== editorId) {\n  //           remote.current = true;\n  //           ops.forEach((op: any) => editor.current!.applyOperation(op));\n  //           remote.current = false;\n  //         }\n  //       }\n  //     );\n  //   });\n  // }, [groupId]);\n\n  useEffect(() => {\n    // in this it will fetch the data of the group.\n    // fetch(`http://localhost:4000/groups/${groupId}`)\n    //   .then((x) =>\n    //     x.json().then((data) => {\n    //       console.log(JSON.parse(data));\n    //       // set value as fetched from the api\n    //       setValue(Value.fromJSON(data));\n    //     })\n    //   )\n    //   .catch((e) => console.log(\"Error is \", e));\n\n    // const eventName = `new-remote-operations-${groupId}`;\n    // socket.on(\n    //   eventName,\n    //   ({ editorId, ops }: { editorId: string; ops: Operation[] }) => {\n    //     if (id.current !== editorId) {\n    //       remote.current = true;\n    //       ops.forEach((op: any) => editor.current!.applyOperation(op));\n    //       remote.current = false;\n    //     }\n    //   }\n    // );\n\n    // return () => {\n    //   socket.off(eventName);\n    // };\n  }, [groupId]);\n\n  return (\n    <>\n      <button\n        onMouseDown={(e) => {\n          e.preventDefault();\n          // bold selected text\n          editor.current!.toggleMark(\"bold\");\n        }}\n      >\n        bold\n      </button>\n      <button\n        onMouseDown={(e) => {\n          e.preventDefault();\n          // bold selected text\n          editor.current!.toggleMark(\"italic\");\n        }}\n      >\n        italic\n      </button>\n\n      <Editor\n        ref={editor}\n        style={{\n          backgroundColor: \"#fafafa\",\n          maxWidth: 800,\n          minHeight: 150,\n        }}\n        value={value}\n        renderMark={(props, _editor, next) => {\n          if (props.mark.type === \"bold\") {\n            return (\n              <strong\n                style={{\n                  letterSpacing: 1,\n                  color: \"pink\",\n                }}\n              >\n                {props.children}\n              </strong>\n            );\n          } else if (props.mark.type === \"italic\") {\n            return <em>{props.children}</em>;\n          }\n\n          return next();\n        }}\n        onChange={(opts) => {\n          setValue(opts.value);\n\n          const ops = opts.operations\n            .filter((o) => {\n              if (o) {\n                return (\n                  o.type !== \"set_selection\" &&\n                  o.type !== \"set_value\" &&\n                  (!o.data || !o.data.has(\"source\"))\n                );\n              }\n\n              return false;\n            })\n            .toJS()\n            .map((o: any) => ({ ...o, data: { source: \"one\" } }));\n          \n          // it will trigger when there is something in ops and remote is false\n          // ops.length condition is for whenever we click on the text, then that is a operation,\n          // so we dont want to hit the event when there is a unnecessary clicks on the editor.\n          // and when there is a change to local, when the changes are done and then it will reflect back to others.\n          if (ops.length && !remote.current) {\n            // new-operations is an event name\n            // socket.emit(\"new-operations\", {\n            //   editorId: id.current,\n            //   ops,\n            //   value: opts.value.toJSON(),\n            //   groupId,\n            // });\n          }\n        }}\n      />\n    </>\n  );\n};\n","import * as React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { SyncingEditor } from \"./SyncingEditor\";\n\nexport const GroupEditor: React.FC<RouteComponentProps<{ id: string }>> = ({\n  match: {\n    params: { id }\n  }\n}) => {\n  return (\n    <div>\n      <SyncingEditor groupId={id} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter, Route, Redirect, Switch } from \"react-router-dom\";\nimport { GroupEditor } from \"./GroupEditor\";\n\nconst Test = () => {\n  return <h1>Hello!</h1>;\n};\n\nconst App = () => {\n  return (\n    <>\n      <h1>Hello </h1>\n      <BrowserRouter>\n        <Switch>\n          <Route\n            path=\"/\"\n            exact\n            render={() => {\n              return <Redirect to={`/group/${Date.now()}`} />;\n            }}\n          />\n          <Route path=\"/group/:id\" component={GroupEditor} />\n          <Route path=\"/test\" component={Test} />\n        </Switch>\n      </BrowserRouter>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}